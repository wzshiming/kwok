# Save cluster config to <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/kwok.yaml
mkdir -p <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>
mkdir -p <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/pki
# Generate PKI to <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/pki
mkdir -p <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/pki/etcd
mkdir -p <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/pki
mkdir -p <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/manifests
mkdir -p <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/logs
touch <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/logs/audit.log
cp <ROOT_DIR>/test/kwokctl/audit-policy.yaml <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/audit.yaml
cp <ROOT_DIR>/test/kwokctl/scheduler-config.yaml <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/scheduler.yaml
cat <<EOF >><ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/scheduler.yaml
clientConnection:
  kubeconfig: "/etc/kubernetes/scheduler.conf"
EOF
cat <<EOF ><ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/apiserver-tracing-config.yaml
apiVersion: apiserver.config.k8s.io/v1alpha1
kind: TracingConfiguration
endpoint: 0.0.0.0:4317
samplingRatePerMillion: 1000000
EOF
cat <<EOF ><ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/kind.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
  apiServerPort: 32766
nodes:
- role: control-plane
  extraPortMappings:
  - containerPort: 8000
    hostPort: 8000
    protocol: TCP
  - containerPort: 9090
    hostPort: 9090
    protocol: TCP
  - containerPort: 16686
    hostPort: 16686
    protocol: TCP
  - containerPort: 2379
    hostPort: 32765
    protocol: TCP
  kubeadmConfigPatches:
  - |
    kind: ClusterConfiguration
    etcd:
      local:
        extraArgs:
          "log-level": "debug"
  - |
    kind: ClusterConfiguration
    apiServer:
      extraArgs:
        "audit-policy-file": "/etc/kubernetes/audit/audit.yaml"
        "audit-log-path": "/var/log/kubernetes/audit.log"
        "tracing-config-file": "/etc/kubernetes/apiserver-tracing-config.yaml"
        "v": "4"
        "max-requests-inflight": "0"
        "max-mutating-requests-inflight": "0"
        "enable-priority-and-fairness": "false"
      extraVolumes:
      - name: audit-policy-file
        hostPath: /var/components/apiserver/etc/kubernetes/audit/audit.yaml
        mountPath: /etc/kubernetes/audit/audit.yaml
        readOnly: true
        pathType: File
      - name: audit-log-path
        hostPath: /var/components/apiserver/var/log/kubernetes/audit.log
        mountPath: /var/log/kubernetes/audit.log
        readOnly: false
        pathType: File
      - name: apiserver-tracing-config
        hostPath: /var/components/apiserver/etc/kubernetes/apiserver-tracing-config.yaml
        mountPath: /etc/kubernetes/apiserver-tracing-config.yaml
        readOnly: true
        pathType: File
  - |
    kind: ClusterConfiguration
    controllerManager:
      extraArgs:
        "v": "4"
        "kube-api-qps": "5000"
        "kube-api-burst": "10000"
  - |
    kind: ClusterConfiguration
    scheduler:
      extraArgs:
        "config": "/etc/kubernetes/scheduler/scheduler.yaml"
        "v": "4"
        "kube-api-qps": "5000"
        "kube-api-burst": "10000"
      extraVolumes:
      - name: config
        hostPath: /var/components/scheduler/etc/kubernetes/scheduler/scheduler.yaml
        mountPath: /etc/kubernetes/scheduler/scheduler.yaml
        readOnly: true
        pathType: File
  # mount the local file on the control plane
  extraMounts:
  - hostPath: <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>
    containerPath: /etc/kwok/
  - hostPath: <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/manifests
    containerPath: /etc/kubernetes/manifests
  - hostPath: <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/pki
    containerPath: /etc/kubernetes/pki
  - hostPath: <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/audit.yaml
    containerPath: /var/components/apiserver/etc/kubernetes/audit/audit.yaml
    readOnly: true
  - hostPath: <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/logs/audit.log
    containerPath: /var/components/apiserver/var/log/kubernetes/audit.log
    readOnly: false
  - hostPath: <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/apiserver-tracing-config.yaml
    containerPath: /var/components/apiserver/etc/kubernetes/apiserver-tracing-config.yaml
    readOnly: true
  - hostPath: <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/scheduler.yaml
    containerPath: /var/components/scheduler/etc/kubernetes/scheduler/scheduler.yaml
    readOnly: true
  - hostPath: <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/prometheus.yaml
    containerPath: /var/components/prometheus/etc/prometheus/prometheus.yaml
    readOnly: false
EOF
cat <<EOF ><ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/manifests/kwok-controller.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  name: kwok-controller
  namespace: kube-system
spec:
  containers:
  - args:
    - --manage-all-nodes=false
    - --manage-nodes-with-annotation-selector=kwok.x-k8s.io/node=fake
    - --kubeconfig=~/.kube/config
    - --config=~/.kwok/kwok.yaml
    - --tls-cert-file=/etc/kubernetes/pki/admin.crt
    - --tls-private-key-file=/etc/kubernetes/pki/admin.key
    - --node-ip=$(POD_IP)
    - --node-name=kwok-controller.kube-system.svc
    - --node-port=10247
    - --server-address=0.0.0.0:10247
    - --node-lease-duration-seconds=40
    - --v=DEBUG
    command:
    - kwok
    env:
    - name: POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    image: localhost/kwok:test
    imagePullPolicy: Never
    name: kwok-controller
    resources: {}
    volumeMounts:
    - mountPath: ~/.kube/config
      name: volume-0
      readOnly: true
    - mountPath: /etc/kubernetes/pki/ca.crt
      name: volume-1
      readOnly: true
    - mountPath: /etc/kubernetes/pki/admin.crt
      name: volume-2
      readOnly: true
    - mountPath: /etc/kubernetes/pki/admin.key
      name: volume-3
      readOnly: true
    - mountPath: ~/.kwok/kwok.yaml
      name: volume-4
      readOnly: true
  hostNetwork: true
  restartPolicy: Always
  securityContext:
    runAsGroup: 0
    runAsUser: 0
  volumes:
  - hostPath:
      path: /etc/kubernetes/admin.conf
    name: volume-0
  - hostPath:
      path: /etc/kubernetes/pki/ca.crt
    name: volume-1
  - hostPath:
      path: /etc/kubernetes/pki/admin.crt
    name: volume-2
  - hostPath:
      path: /etc/kubernetes/pki/admin.key
    name: volume-3
  - hostPath:
      path: /etc/kwok/kwok.yaml
    name: volume-4
status: {}
EOF
cat <<EOF ><ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/manifests/dashboard.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  name: dashboard
  namespace: kube-system
spec:
  containers:
  - args:
    - --insecure-bind-address=0.0.0.0
    - --bind-address=127.0.0.1
    - --port=0
    - --enable-insecure-login
    - --enable-skip-login
    - --disable-settings-authorizer
    - --metrics-provider=none
    - --system-banner=Welcome to kwok-<CLUSTER_NAME>
    - --kubeconfig=~/.kube/config
    - --insecure-port=8000
    image: docker.io/kubernetesui/dashboard:v2.7.0
    imagePullPolicy: Never
    name: dashboard
    ports:
    - containerPort: 8000
      hostPort: 8000
      name: http
      protocol: TCP
    resources: {}
    volumeMounts:
    - mountPath: ~/.kube/config
      name: volume-0
      readOnly: true
    - mountPath: /etc/kubernetes/pki/ca.crt
      name: volume-1
      readOnly: true
    - mountPath: /etc/kubernetes/pki/admin.crt
      name: volume-2
      readOnly: true
    - mountPath: /etc/kubernetes/pki/admin.key
      name: volume-3
      readOnly: true
  hostNetwork: true
  restartPolicy: Always
  securityContext:
    runAsGroup: 0
    runAsUser: 0
  volumes:
  - hostPath:
      path: /etc/kubernetes/admin.conf
    name: volume-0
  - hostPath:
      path: /etc/kubernetes/pki/ca.crt
    name: volume-1
  - hostPath:
      path: /etc/kubernetes/pki/admin.crt
    name: volume-2
  - hostPath:
      path: /etc/kubernetes/pki/admin.key
    name: volume-3
status: {}
EOF
cat <<EOF ><ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/manifests/metrics-server.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  name: metrics-server
  namespace: kube-system
spec:
  containers:
  - args:
    - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
    - --kubelet-use-node-status-port
    - --kubelet-insecure-tls
    - --metric-resolution=15s
    - --bind-address=0.0.0.0
    - --secure-port=4443
    - --kubeconfig=~/.kube/config
    - --authentication-kubeconfig=~/.kube/config
    - --authorization-kubeconfig=~/.kube/config
    - --tls-cert-file=/etc/kubernetes/pki/admin.crt
    - --tls-private-key-file=/etc/kubernetes/pki/admin.key
    - --v=4
    command:
    - /metrics-server
    image: registry.k8s.io/metrics-server/metrics-server:v0.7.0
    imagePullPolicy: Never
    name: metrics-server
    ports:
    - containerPort: 4443
      hostPort: 4443
    resources: {}
    volumeMounts:
    - mountPath: ~/.kube/config
      name: volume-0
      readOnly: true
    - mountPath: /etc/kubernetes/pki/ca.crt
      name: volume-1
      readOnly: true
    - mountPath: /etc/kubernetes/pki/admin.crt
      name: volume-2
      readOnly: true
    - mountPath: /etc/kubernetes/pki/admin.key
      name: volume-3
      readOnly: true
  hostNetwork: true
  restartPolicy: Always
  securityContext:
    runAsGroup: 0
    runAsUser: 0
  volumes:
  - hostPath:
      path: /etc/kubernetes/admin.conf
    name: volume-0
  - hostPath:
      path: /etc/kubernetes/pki/ca.crt
    name: volume-1
  - hostPath:
      path: /etc/kubernetes/pki/admin.crt
    name: volume-2
  - hostPath:
      path: /etc/kubernetes/pki/admin.key
    name: volume-3
status: {}
EOF
cat <<EOF ><ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/manifests/prometheus.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  name: prometheus
  namespace: kube-system
spec:
  containers:
  - args:
    - --config.file=/etc/prometheus/prometheus.yaml
    - --web.listen-address=0.0.0.0:9090
    - --log.level=debug
    command:
    - prometheus
    image: docker.io/prom/prometheus:v2.49.1
    imagePullPolicy: Never
    name: prometheus
    ports:
    - containerPort: 9090
      hostPort: 9090
    resources: {}
    volumeMounts:
    - mountPath: /etc/prometheus/prometheus.yaml
      name: volume-0
      readOnly: true
    - mountPath: /etc/kubernetes/pki/admin.crt
      name: volume-1
      readOnly: true
    - mountPath: /etc/kubernetes/pki/admin.key
      name: volume-2
      readOnly: true
    - mountPath: /etc/kubernetes/pki/apiserver-etcd-client.crt
      name: volume-3
      readOnly: true
    - mountPath: /etc/kubernetes/pki/apiserver-etcd-client.key
      name: volume-4
      readOnly: true
  hostNetwork: true
  restartPolicy: Always
  securityContext:
    runAsGroup: 0
    runAsUser: 0
  volumes:
  - hostPath:
      path: /var/components/prometheus/etc/prometheus/prometheus.yaml
    name: volume-0
  - hostPath:
      path: /etc/kubernetes/pki/admin.crt
    name: volume-1
  - hostPath:
      path: /etc/kubernetes/pki/admin.key
    name: volume-2
  - hostPath:
      path: /etc/kubernetes/pki/apiserver-etcd-client.crt
    name: volume-3
  - hostPath:
      path: /etc/kubernetes/pki/apiserver-etcd-client.key
    name: volume-4
status: {}
EOF
cat <<EOF ><ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/manifests/jaeger.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  name: jaeger
  namespace: kube-system
spec:
  containers:
  - args:
    - --collector.otlp.enabled=true
    - --query.http-server.host-port=0.0.0.0:16686
    - --log-level=debug
    image: docker.io/jaegertracing/all-in-one:1.53.0
    imagePullPolicy: Never
    name: jaeger
    ports:
    - containerPort: 16686
      hostPort: 16686
    resources: {}
  hostNetwork: true
  restartPolicy: Always
  securityContext:
    runAsGroup: 0
    runAsUser: 0
status: {}
EOF
cat <<EOF ><ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/prometheus.yaml
global:
  scrape_interval: 15s
  scrape_timeout: 10s
  evaluation_interval: 15s
alerting:
  alertmanagers:
  - follow_redirects: true
    enable_http2: true
    scheme: http
    timeout: 10s
    api_version: v2
    static_configs:
    - targets: []
scrape_configs:
- job_name: "etcd"
  scheme: https
  honor_timestamps: true
  metrics_path: /metrics
  follow_redirects: true
  enable_http2: true
  tls_config:
    cert_file: "/etc/kubernetes/pki/apiserver-etcd-client.crt"
    key_file: "/etc/kubernetes/pki/apiserver-etcd-client.key"
    insecure_skip_verify: true
  static_configs:
  - targets:
    - 127.0.0.1:2379
- job_name: "kube-apiserver"
  scheme: https
  honor_timestamps: true
  metrics_path: /metrics
  follow_redirects: true
  enable_http2: true
  tls_config:
    cert_file: "/etc/kubernetes/pki/admin.crt"
    key_file: "/etc/kubernetes/pki/admin.key"
    insecure_skip_verify: true
  static_configs:
  - targets:
    - 127.0.0.1:6443
- job_name: "kube-controller-manager"
  scheme: https
  honor_timestamps: true
  metrics_path: /metrics
  follow_redirects: true
  enable_http2: true
  tls_config:
    cert_file: "/etc/kubernetes/pki/admin.crt"
    key_file: "/etc/kubernetes/pki/admin.key"
    insecure_skip_verify: true
  static_configs:
  - targets:
    - 127.0.0.1:10257
- job_name: "kube-scheduler"
  scheme: https
  honor_timestamps: true
  metrics_path: /metrics
  follow_redirects: true
  enable_http2: true
  tls_config:
    cert_file: "/etc/kubernetes/pki/admin.crt"
    key_file: "/etc/kubernetes/pki/admin.key"
    insecure_skip_verify: true
  static_configs:
  - targets:
    - 127.0.0.1:10259
- job_name: "kwok-controller-metrics-discovery"
  http_sd_configs:
  - url: http://127.0.0.1:10247/discovery/prometheus
- job_name: "kwok-controller"
  scheme: http
  honor_timestamps: true
  metrics_path: /metrics
  follow_redirects: true
  enable_http2: true
  static_configs:
  - targets:
    - 127.0.0.1:10247
- job_name: "metrics-server"
  scheme: https
  honor_timestamps: true
  metrics_path: /metrics
  follow_redirects: true
  enable_http2: true
  tls_config:
    cert_file: "/etc/kubernetes/pki/admin.crt"
    key_file: "/etc/kubernetes/pki/admin.key"
    insecure_skip_verify: true
  static_configs:
  - targets:
    - 127.0.0.1:4443
- job_name: "prometheus"
  scheme: http
  honor_timestamps: true
  metrics_path: /metrics
  follow_redirects: true
  enable_http2: true
  static_configs:
  - targets:
    - 127.0.0.1:9090
EOF
podman pull docker.io/kindest/node:v1.29.0
podman pull localhost/kwok:test
podman pull docker.io/kubernetesui/dashboard:v2.7.0
podman pull registry.k8s.io/metrics-server/metrics-server:v0.7.0
podman pull docker.io/prom/prometheus:v2.49.1
podman pull docker.io/jaegertracing/all-in-one:1.53.0
# Save cluster config to <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/kwok.yaml
KIND_EXPERIMENTAL_PROVIDER=podman kind create cluster --config <ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/kind.yaml --name kwok-<CLUSTER_NAME> --image docker.io/kindest/node:v1.29.0 --wait 29m
mkdir -p <ROOT_DIR>/workdir/cache/image-archive/localhost/kwok
podman save localhost/kwok:test -o <ROOT_DIR>/workdir/cache/image-archive/localhost/kwok/test.tar
KIND_EXPERIMENTAL_PROVIDER=podman kind load image-archive <ROOT_DIR>/workdir/cache/image-archive/localhost/kwok/test.tar --name kwok-<CLUSTER_NAME>
rm <ROOT_DIR>/workdir/cache/image-archive/localhost/kwok/test.tar
mkdir -p <ROOT_DIR>/workdir/cache/image-archive/docker.io/kubernetesui/dashboard
podman save docker.io/kubernetesui/dashboard:v2.7.0 -o <ROOT_DIR>/workdir/cache/image-archive/docker.io/kubernetesui/dashboard/v2.7.0.tar
KIND_EXPERIMENTAL_PROVIDER=podman kind load image-archive <ROOT_DIR>/workdir/cache/image-archive/docker.io/kubernetesui/dashboard/v2.7.0.tar --name kwok-<CLUSTER_NAME>
rm <ROOT_DIR>/workdir/cache/image-archive/docker.io/kubernetesui/dashboard/v2.7.0.tar
mkdir -p <ROOT_DIR>/workdir/cache/image-archive/registry.k8s.io/metrics-server/metrics-server
podman save registry.k8s.io/metrics-server/metrics-server:v0.7.0 -o <ROOT_DIR>/workdir/cache/image-archive/registry.k8s.io/metrics-server/metrics-server/v0.7.0.tar
KIND_EXPERIMENTAL_PROVIDER=podman kind load image-archive <ROOT_DIR>/workdir/cache/image-archive/registry.k8s.io/metrics-server/metrics-server/v0.7.0.tar --name kwok-<CLUSTER_NAME>
rm <ROOT_DIR>/workdir/cache/image-archive/registry.k8s.io/metrics-server/metrics-server/v0.7.0.tar
mkdir -p <ROOT_DIR>/workdir/cache/image-archive/docker.io/prom/prometheus
podman save docker.io/prom/prometheus:v2.49.1 -o <ROOT_DIR>/workdir/cache/image-archive/docker.io/prom/prometheus/v2.49.1.tar
KIND_EXPERIMENTAL_PROVIDER=podman kind load image-archive <ROOT_DIR>/workdir/cache/image-archive/docker.io/prom/prometheus/v2.49.1.tar --name kwok-<CLUSTER_NAME>
rm <ROOT_DIR>/workdir/cache/image-archive/docker.io/prom/prometheus/v2.49.1.tar
mkdir -p <ROOT_DIR>/workdir/cache/image-archive/docker.io/jaegertracing/all-in-one
podman save docker.io/jaegertracing/all-in-one:1.53.0 -o <ROOT_DIR>/workdir/cache/image-archive/docker.io/jaegertracing/all-in-one/1.53.0.tar
KIND_EXPERIMENTAL_PROVIDER=podman kind load image-archive <ROOT_DIR>/workdir/cache/image-archive/docker.io/jaegertracing/all-in-one/1.53.0.tar --name kwok-<CLUSTER_NAME>
rm <ROOT_DIR>/workdir/cache/image-archive/docker.io/jaegertracing/all-in-one/1.53.0.tar
kubectl config view --minify=true --raw=true
cat <<EOF ><ROOT_DIR>/workdir/clusters/<CLUSTER_NAME>/kubeconfig.yaml
EOF
kubectl cordon kwok-<CLUSTER_NAME>-control-plane
podman exec kwok-<CLUSTER_NAME>-control-plane chmod -R +r /etc/kubernetes/pki
# Set up apiservice for metrics server
# Add context kwok-<CLUSTER_NAME> to ~/.kube/config
